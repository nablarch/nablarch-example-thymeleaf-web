<?xml version="1.0" encoding="UTF-8"?>

<component-configuration
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://tis.co.jp/nablarch/component-configuration"
    xsi:schemaLocation="http://tis.co.jp/nablarch/component-configuration  https://nablarch.github.io/schema/component-configuration.xsd">

  <!-- テーブル定義 -->
  <import file="nablarch/schema-config.xml" />
  
  <!-- jsr310 -->
  <import file="JSR310.xml" />
  
  <!-- 環境設定ファイル -->
  <config-file file="env.properties" />
  <config-file file="common.properties" />

  <!-- バリデーション -->
  <import file="com/nablarch/example/app/core/validation.xml" />

  <!-- web固有設定の読み込み -->
  <!-- データベース設定 -->
  <import file="nablarch/webui/db-for-webui.xml"/>
  <import file="db.xml" />

  <!-- Interceptorの実行順定義 -->
  <import file="com/nablarch/example/app/web/webui/interceptors.xml" />

  <!--
    二重サブミット防止機能
    二重サブミットが発生した際のデフォルトの遷移先パスを指定する
  -->
  <component name="doubleSubmissionHandler"
             class="nablarch.common.web.token.BasicDoubleSubmissionHandler">
    <!-- 二重サブミットと判定した場合の遷移先のリソースパス -->
    <property name="path" value="common/errorPages/doubleSubmissionError.html" />
    <!-- 二重サブミットと判定した場合の遷移先で表示するエラーメッセージのメッセージID -->
    <property name="messageId" value="${nablarch.doubleSubmissionHandler.messageId}" />
    <!-- 二重サブミットと判定した場合のレスポンスステータス。デフォルトは400 -->
    <property name="statusCode" value="400" />
  </component>

  <!-- hidden暗号化機能を使用しないリクエストID -->
  <list name="noHiddenEncryptionRequestIds">
  </list>

  <!-- HTTPリクエストマッピング機能 -->
  <import file="com/nablarch/example/app/web/webui/request-mapper-for-webui.xml" />

  <!-- セッションストア機能 -->
  <import file="nablarch/webui/session-store.xml" />

  <!-- ダイアレクト設定 -->
  <!-- 使用するDBに合わせてダイアレクトを設定すること -->
  <component name="dialect" class="nablarch.core.db.dialect.H2Dialect" />

  <!-- ハンドラキュー構成 -->
  <component name="webFrontController"
             class="nablarch.fw.web.servlet.WebFrontController">
    <property name="handlerQueue">
      <list>
        <component class="nablarch.fw.web.handler.HttpCharacterEncodingHandler">
          <property name="appendResponseCharacterEncoding" value="true"/>
        </component>

        <component class="nablarch.fw.handler.GlobalErrorHandler"/>

        <component class="nablarch.fw.web.handler.HttpResponseHandler"/>

        <component class="nablarch.fw.web.handler.SecureHandler" />

        <component-ref name="sessionStoreHandler" />

        <component class="nablarch.fw.web.handler.NormalizationHandler">
          <property name="normalizers">
            <list>
              <component class="nablarch.fw.web.handler.normalizer.TrimNormalizer" />
              <component class="com.nablarch.example.app.web.handler.DateFormatNormalizer" />
            </list>
          </property>
        </component>

        <component class="nablarch.fw.web.handler.ForwardingHandler"/>

        <component class="nablarch.fw.web.handler.HttpErrorHandler" >
          <property name="defaultPages">
            <map>
              <entry key="4.." value="common/errorPages/userError.html" />
              <entry key="403" value="common/errorPages/permissionError.html" />
              <entry key="404" value="common/errorPages/pageNotFoundError.html" />
              <entry key="413" value="common/errorPages/requestEntityTooLarge.html" />
              <entry key="5.." value="common/errorPages/error.html" />
              <entry key="503" value="common/errorPages/serviceUnavailableError.html" />
            </map>
          </property>
        </component>

        <component class="com.nablarch.example.app.web.handler.ExampleErrorForwardHandler"/>

        <component-ref name="packageMapping"/>
      </list>
    </property>
  </component>

  <!-- 初期化が必要なコンポーネント -->
  <component name="initializer"
             class="nablarch.core.repository.initialization.BasicApplicationInitializer">
    <property name="initializeList">
      <list>
        <!-- web/session-store.xml:DBストア-->
        <component-ref name="dbStore" />
        <component-ref name="packageMapping" />
      </list>
    </property>
  </component>

  <component name="domaDialect" class="org.seasar.doma.jdbc.dialect.H2Dialect" />

  <component name="templateEngine" class="org.thymeleaf.TemplateEngine"
    autowireType="None">
    <property name="templateResolver">
      <component
        class="org.thymeleaf.templateresolver.ClassLoaderTemplateResolver">
        <property name="prefix" value="template/" />
        <property name="characterEncoding" value="UTF-8"/>
        <property name="cacheable" value="false"/>
      </component>
    </property>
  </component>

  <component name="thymeleafResponseWriter"
    class="nablarch.fw.web.handler.responsewriter.thymeleaf.ThymeleafResponseWriter"
    autowireType="None">
    <property name="templateEngine" ref="templateEngine" />
  </component>

</component-configuration>
